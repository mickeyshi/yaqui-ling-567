;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of yaq
;;; created at:
;;;     Fri Jan 15 07:14:12 UTC 2021
;;; based on Matrix customization system version of:
;;;     Tue Jan 12 18:25:51 UTC 2021
;;;
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

basic-head-comp-phrase :+ [ SYNSEM [ LIGHT -,
             LOCAL.CAT.MC #mc ],
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

head :+ [ PRON bool,
    AUX bool,
    POSSESSOR poss,
    SPEC-INIT bool,
    FORM form ].

+nd :+ [ CASE case ].

inflected :+ [ VERB-PC60-FLAG luk,
    VERB-PC61-OR-VERB-PC62-FLAG luk,
    VERB-PC62-FLAG luk,
    VERB-PC59-FLAG luk,
    VERB-PC59-OR-VERB-PC60-FLAG luk,
    NOUN-PC5-FLAG luk,
    VERB-PC61-FLAG luk ].

infl-satisfied :+ [ VERB-PC60-FLAG na-or-+,
    VERB-PC61-OR-VERB-PC62-FLAG na-or-+,
    VERB-PC62-FLAG na-or-+,
    VERB-PC59-FLAG na-or-+,
    VERB-PC59-OR-VERB-PC60-FLAG na-or-+,
    NOUN-PC5-FLAG na-or-+,
    VERB-PC61-FLAG na-or-+ ].

png :+ [ PER person,
    NUM number ].

cat :+ [ POSSESSUM poss ].

poss := *top* &
  [ POSS-AGR png ].

basic-bare-np-phrase :+ [ SYNSEM.LOCAL.CAT [ VAL.SPEC < >,
                       HEAD #head,
                       POSSESSUM #possessum ],
    HEAD-DTR.SYNSEM.LOCAL.CAT [ HEAD #head,
                                POSSESSUM #possessum & nonpossessive ] ].

basic-head-1st-comp-phrase :+ [ SYNSEM.LOCAL.CAT.POSSESSUM #poss,
    HEAD-DTR.SYNSEM.LOCAL.CAT.POSSESSUM #poss ].

basic-head-opt-subj-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

basic-determiner-lex :+ [ SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR nonpossessive,
                       POSSESSUM nonpossessive ] ].

poss-case := case.

top-coord-rule :+ [ SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                       POSSESSUM #possessum ],
    RCOORD-DTR.SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                                  POSSESSUM #possessum ],
    LCOORD-DTR.SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                                  POSSESSUM #possessum ] ].

bottom-coord-phrase :+ [ SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                       POSSESSUM #possessum ],
    NONCONJ-DTR.SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                                   POSSESSUM #possessum ] ].

mid-coord-rule :+ [ SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                       POSSESSUM #possessum ],
    RCOORD-DTR.SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                                  POSSESSUM #possessum ],
    LCOORD-DTR.SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                                  POSSESSUM #possessum ] ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Case

case := *top*.
real-case := case.  ; intermediate case type for all real cases
nom := real-case & acc+nom.  ; nom
acc := real-case & acc+nom.  ; acc
ins := real-case.  ; ins
all := real-case.  ; all
gen := real-case.  ; gen
acc+nom := case.

;;; Person

person := *top*.
1st := person.
non-1st := person.
2nd := non-1st.
3rd := non-1st.

;;; Number

number := *top*.
pl := number.
sg := number.

;;; Possession

possession := *top*.
possessive := poss.  ; supertype for possessive features
nonpossessive := poss.  ; type for nonpossessive
possessor := possessive.
possessum := possessive.
possessive-pron-1 := possessive.  ; supertype for strategy pron-1
possessor-pron-1 := possessor & possessive-pron-1.
possessum-pron-1 := possessum & possessive-pron-1.

;;; Possession

possessive-pron-2 := possessive.  ; supertype for strategy pron-2
possessor-pron-2 := possessor & possessive-pron-2.
possessum-pron-2 := possessum & possessive-pron-2.

;;; Form

form := *top*.
nonfinite := form.
finite := form.

;;; Tense

pst := tense.
fut := tense.

;;; Aspect

pot := aspect.
rel := aspect.
ipfv+pfv+prosp := aspect.
prosp := ipfv+pfv+prosp.
ipfv+pfv := ipfv+pfv+prosp.
ipfv := ipfv+pfv.
pfv := ipfv+pfv & cmpl+incep+pfv.
cmpl+incep+pfv := aspect.
cmpl := cmpl+incep+pfv.
incep := cmpl+incep+pfv.

;;; Mood

ind := mood.
irr := mood.
imp := mood.
sbjv := mood.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-non-wh-word-lex & non-local-none-lex-item & no-hcons-lex-item & non-mod-lex-item &
  [ ARG-ST < #spr >,
    SYNSEM.LOCAL.CAT [ VAL [ SPR < #spr &
                                   [ LOCAL.CAT.HEAD det ] >,
                             COMPS < >,
                             SUBJ < >,
                             SPEC < > ],
                       HEAD.POSSESSOR nonpossessive,
                       POSSESSUM nonpossessive ] ].

; Nouns which cannot take specifiers mark their SPR requirement
; as OPT +.  Making the non-head daughter OPT - in this rule
; keeps such nouns out.
; 
; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

head-spec-phrase := basic-head-spec-phrase & head-final &
  [ NON-HEAD-DTR.SYNSEM [ OPT -,
                          LOCAL.CAT.VAL.SPEC < [ LOCAL.CAT.POSSESSUM #poss ] > ],
    HEAD-DTR.SYNSEM.LOCAL.CAT.POSSESSUM #poss ].

noun7-noun-lex := noun-lex & noun-pc10-rule-dtr & noun-pc16-rule-dtr & noun-pc2-rule-dtr & noun-pc4-rule-dtr & noun-pc5-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd,
    INFLECTED.NOUN-PC5-FLAG - ].

noun17-noun-lex := noun-lex & noun-pc9-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

noun21-noun-lex := noun-lex & noun-pc10-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

noun27-noun-lex := noun-lex & noun-pc9-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

noun29-noun-lex := noun-lex & noun-pc1-rule-dtr & noun-pc10-rule-dtr & noun-pc12-rule-dtr & noun-pc16-rule-dtr & noun-pc2-rule-dtr & noun-pc5-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd,
    INFLECTED.NOUN-PC5-FLAG - ].

noun33-noun-lex := noun-lex & noun-pc1-rule-dtr & noun-pc10-rule-dtr & noun-pc12-rule-dtr & noun-pc16-rule-dtr & noun-pc2-rule-dtr & noun-pc4-rule-dtr & noun-pc5-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd,
    INFLECTED.NOUN-PC5-FLAG - ].

noun81-noun-lex := noun-lex & noun-pc1-rule-dtr & noun-pc10-rule-dtr & noun-pc16-rule-dtr & noun-pc2-rule-dtr & noun-pc5-rule-dtr & noun-pc7-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd,
    INFLECTED.NOUN-PC5-FLAG - ].

noun95-noun-lex := noun-lex & noun-pc1-rule-dtr & noun-pc10-rule-dtr & noun-pc14-rule-dtr & noun-pc16-rule-dtr & noun-pc2-rule-dtr & noun-pc21-rule-dtr & noun-pc5-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd,
    INFLECTED.NOUN-PC5-FLAG - ].

noun98-noun-lex := noun-lex & noun-pc1-rule-dtr & noun-pc10-rule-dtr & noun-pc2-rule-dtr & noun-pc7-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

noun112-noun-lex := noun-lex & noun-pc1-rule-dtr & noun-pc10-rule-dtr & noun-pc14-rule-dtr & noun-pc15-or-noun-pc19-or-noun-pc3-rule-dtr & noun-pc16-rule-dtr & noun-pc2-rule-dtr & noun-pc21-rule-dtr & noun-pc4-rule-dtr & noun-pc5-rule-dtr & noun-pc7-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd,
    INFLECTED.NOUN-PC5-FLAG - ].

noun113-noun-lex := noun-lex & noun-pc1-rule-dtr & noun-pc10-rule-dtr & noun-pc14-rule-dtr & noun-pc15-or-noun-pc19-or-noun-pc3-rule-dtr & noun-pc16-rule-dtr & noun-pc2-rule-dtr & noun-pc21-rule-dtr & noun-pc4-rule-dtr & noun-pc5-rule-dtr & noun-pc7-rule-dtr &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG [ PER 2nd,
                                         NUM pl ],
                   CAT.HEAD [ PRON +,
                              CASE acc ] ],
    INFLECTED.NOUN-PC5-FLAG - ].

noun114-noun-lex := noun-lex & noun-pc1-rule-dtr & noun-pc10-rule-dtr & noun-pc14-rule-dtr & noun-pc15-or-noun-pc19-or-noun-pc3-rule-dtr & noun-pc16-rule-dtr & noun-pc2-rule-dtr & noun-pc21-rule-dtr & noun-pc4-rule-dtr & noun-pc5-rule-dtr & noun-pc7-rule-dtr &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG [ PER 3rd,
                                         NUM sg ],
                   CAT.HEAD [ PRON +,
                              CASE acc ] ],
    INFLECTED.NOUN-PC5-FLAG - ].

noun115-noun-lex := noun-lex & noun-pc1-rule-dtr & noun-pc10-rule-dtr & noun-pc14-rule-dtr & noun-pc15-or-noun-pc19-or-noun-pc3-rule-dtr & noun-pc16-rule-dtr & noun-pc2-rule-dtr & noun-pc21-rule-dtr & noun-pc4-rule-dtr & noun-pc5-rule-dtr & noun-pc7-rule-dtr &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG [ PER 3rd,
                                         NUM sg ],
                   CAT.HEAD [ PRON +,
                              CASE nom ] ],
    INFLECTED.NOUN-PC5-FLAG - ].

noun116-noun-lex := noun-lex & noun-pc1-rule-dtr & noun-pc10-rule-dtr & noun-pc14-rule-dtr & noun-pc15-or-noun-pc19-or-noun-pc3-rule-dtr & noun-pc16-rule-dtr & noun-pc2-rule-dtr & noun-pc21-rule-dtr & noun-pc4-rule-dtr & noun-pc5-rule-dtr & noun-pc7-rule-dtr &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG [ PER 3rd,
                                         NUM sg ] ],
    INFLECTED.NOUN-PC5-FLAG - ].

noun117-noun-lex := noun-lex & noun-pc1-rule-dtr & noun-pc10-rule-dtr & noun-pc14-rule-dtr & noun-pc15-or-noun-pc19-or-noun-pc3-rule-dtr & noun-pc16-rule-dtr & noun-pc2-rule-dtr & noun-pc21-rule-dtr & noun-pc4-rule-dtr & noun-pc5-rule-dtr & noun-pc7-rule-dtr &
  [ SYNSEM.LOCAL.CAT.HEAD [ PRON +,
                            CASE all ],
    INFLECTED.NOUN-PC5-FLAG - ].

noun118-noun-lex := noun-lex & noun-pc1-rule-dtr & noun-pc10-rule-dtr & noun-pc14-rule-dtr & noun-pc15-or-noun-pc19-or-noun-pc3-rule-dtr & noun-pc16-rule-dtr & noun-pc2-rule-dtr & noun-pc21-rule-dtr & noun-pc4-rule-dtr & noun-pc5-rule-dtr & noun-pc7-rule-dtr &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG [ PER 2nd,
                                         NUM pl ],
                   CAT.HEAD [ PRON +,
                              CASE nom ] ],
    INFLECTED.NOUN-PC5-FLAG - ].

noun119-noun-lex := noun-lex & noun-pc1-rule-dtr & noun-pc10-rule-dtr & noun-pc14-rule-dtr & noun-pc15-or-noun-pc19-or-noun-pc3-rule-dtr & noun-pc16-rule-dtr & noun-pc2-rule-dtr & noun-pc21-rule-dtr & noun-pc4-rule-dtr & noun-pc5-rule-dtr & noun-pc7-rule-dtr &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG [ PER 2nd,
                                         NUM sg ],
                   CAT.HEAD [ PRON +,
                              CASE nom ] ],
    INFLECTED.NOUN-PC5-FLAG - ].

noun120-noun-lex := noun-lex & noun-pc1-rule-dtr & noun-pc10-rule-dtr & noun-pc14-rule-dtr & noun-pc15-or-noun-pc19-or-noun-pc3-rule-dtr & noun-pc16-rule-dtr & noun-pc2-rule-dtr & noun-pc21-rule-dtr & noun-pc4-rule-dtr & noun-pc5-rule-dtr & noun-pc7-rule-dtr &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG [ PER 2nd,
                                         NUM sg ],
                   CAT.HEAD [ PRON +,
                              CASE acc ] ],
    INFLECTED.NOUN-PC5-FLAG - ].

noun121-noun-lex := noun-lex & noun-pc1-rule-dtr & noun-pc10-rule-dtr & noun-pc14-rule-dtr & noun-pc15-or-noun-pc19-or-noun-pc3-rule-dtr & noun-pc16-rule-dtr & noun-pc2-rule-dtr & noun-pc21-rule-dtr & noun-pc4-rule-dtr & noun-pc5-rule-dtr & noun-pc7-rule-dtr &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG [ PER 1st,
                                         NUM sg ],
                   CAT.HEAD [ PRON +,
                              CASE nom ] ],
    INFLECTED.NOUN-PC5-FLAG - ].

noun122-noun-lex := noun-lex & noun-pc1-rule-dtr & noun-pc10-rule-dtr & noun-pc14-rule-dtr & noun-pc15-or-noun-pc19-or-noun-pc3-rule-dtr & noun-pc16-rule-dtr & noun-pc2-rule-dtr & noun-pc21-rule-dtr & noun-pc4-rule-dtr & noun-pc5-rule-dtr & noun-pc7-rule-dtr &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG [ PER 1st,
                                         NUM pl ],
                   CAT.HEAD [ PRON +,
                              CASE nom ] ],
    INFLECTED.NOUN-PC5-FLAG - ].

noun123-noun-lex := noun-lex & noun-pc1-rule-dtr & noun-pc10-rule-dtr & noun-pc14-rule-dtr & noun-pc15-or-noun-pc19-or-noun-pc3-rule-dtr & noun-pc16-rule-dtr & noun-pc2-rule-dtr & noun-pc21-rule-dtr & noun-pc4-rule-dtr & noun-pc5-rule-dtr & noun-pc7-rule-dtr &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG [ PER 1st,
                                         NUM pl ],
                   CAT.HEAD [ PRON +,
                              CASE nom ] ],
    INFLECTED.NOUN-PC5-FLAG - ].

noun124-noun-lex := noun-lex & noun-pc1-rule-dtr & noun-pc10-rule-dtr & noun-pc14-rule-dtr & noun-pc15-or-noun-pc19-or-noun-pc3-rule-dtr & noun-pc16-rule-dtr & noun-pc2-rule-dtr & noun-pc21-rule-dtr & noun-pc4-rule-dtr & noun-pc5-rule-dtr & noun-pc7-rule-dtr &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG [ PER 1st,
                                         NUM pl ] ],
    INFLECTED.NOUN-PC5-FLAG - ].

noun125-noun-lex := noun-lex & noun-pc1-rule-dtr & noun-pc10-rule-dtr & noun-pc14-rule-dtr & noun-pc15-or-noun-pc19-or-noun-pc3-rule-dtr & noun-pc16-rule-dtr & noun-pc2-rule-dtr & noun-pc21-rule-dtr & noun-pc4-rule-dtr & noun-pc5-rule-dtr & noun-pc7-rule-dtr &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG [ PER 1st,
                                         NUM sg ],
                   CAT.HEAD [ PRON +,
                              CASE acc ] ],
    INFLECTED.NOUN-PC5-FLAG - ].

noun126-noun-lex := noun-lex & noun-pc1-rule-dtr & noun-pc10-rule-dtr & noun-pc14-rule-dtr & noun-pc15-or-noun-pc19-or-noun-pc3-rule-dtr & noun-pc16-rule-dtr & noun-pc2-rule-dtr & noun-pc21-rule-dtr & noun-pc4-rule-dtr & noun-pc5-rule-dtr & noun-pc7-rule-dtr &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG [ PER 1st,
                                         NUM sg ],
                   CAT.HEAD [ PRON +,
                              CASE acc+nom ] ],
    INFLECTED.NOUN-PC5-FLAG - ].

noun127-noun-lex := noun-lex & noun-pc1-rule-dtr & noun-pc10-rule-dtr & noun-pc14-rule-dtr & noun-pc15-or-noun-pc19-or-noun-pc3-rule-dtr & noun-pc16-rule-dtr & noun-pc2-rule-dtr & noun-pc21-rule-dtr & noun-pc4-rule-dtr & noun-pc5-rule-dtr & noun-pc7-rule-dtr &
  [ SYNSEM.LOCAL.CAT.HEAD [ PRON +,
                            CASE all ],
    INFLECTED.NOUN-PC5-FLAG - ].

noun128-noun-lex := noun-lex & noun-pc1-rule-dtr & noun-pc10-rule-dtr & noun-pc14-rule-dtr & noun-pc15-or-noun-pc19-or-noun-pc3-rule-dtr & noun-pc16-rule-dtr & noun-pc2-rule-dtr & noun-pc21-rule-dtr & noun-pc4-rule-dtr & noun-pc5-rule-dtr & noun-pc7-rule-dtr &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG [ PER 3rd,
                                         NUM pl ],
                   CAT.HEAD [ PRON +,
                              CASE nom ] ],
    INFLECTED.NOUN-PC5-FLAG - ].

noun129-noun-lex := noun-lex & noun-pc1-rule-dtr & noun-pc10-rule-dtr & noun-pc14-rule-dtr & noun-pc15-or-noun-pc19-or-noun-pc3-rule-dtr & noun-pc16-rule-dtr & noun-pc2-rule-dtr & noun-pc21-rule-dtr & noun-pc4-rule-dtr & noun-pc5-rule-dtr & noun-pc7-rule-dtr &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG [ PER 3rd,
                                         NUM pl ],
                   CAT.HEAD [ PRON +,
                              CASE acc ] ],
    INFLECTED.NOUN-PC5-FLAG - ].

poss-pron1-noun-lex := non-local-none-lex-item &
  [ SYNSEM [ LKEYS.ALTKEYREL #altkeyrel & noun-relation &
                             [ PRED "pron_rel",
                               LBL #ltop,
                               ARG0 #possessor &
                                    [ COG-ST activ-or-more,
                                      SPECI + ] ],
             LOCAL [ CONT [ HOOK [ INDEX #possessor,
                                   LTOP #ltop ],
                            RELS.LIST < #altkeyrel >,
                            HCONS.LIST < > ],
                     CAT [ VAL [ SPR < [ LOCAL.CAT.HEAD det,
                                         OPT + ] >,
                                 COMPS olist,
                                 SUBJ olist,
                                 SPEC < > ],
                           HEAD noun &
                                [ PRON +,
                                  POSSESSOR possessor-pron-1,
                                  CASE poss-case ] ] ] ] ].

1st-sg-possessive-noun-lex := poss-pron1-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER 1st,
                                       NUM sg ] ].

1st-pl-possessive-noun-lex := poss-pron1-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM pl,
                                       PER 1st ] ].

2nd-sg-possessive-noun-lex := poss-pron1-noun-lex.

2nd-pl-possessive-noun-lex := poss-pron1-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM pl,
                                       PER 2nd ] ].

3rd-sg-possessive-alt-noun-lex := poss-pron1-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM sg,
                                       PER 1st ] ].

3rd-pl-possessive-noun-lex := poss-pron1-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM pl,
                                       PER 3rd ] ].

poss-pron2-noun-lex := non-local-none-lex-item &
  [ SYNSEM [ LKEYS.ALTKEYREL #altkeyrel & noun-relation &
                             [ PRED "pron_rel",
                               LBL #ltop,
                               ARG0 #possessor &
                                    [ COG-ST activ-or-more,
                                      SPECI + ] ],
             LOCAL [ CONT [ HOOK [ INDEX #possessor,
                                   LTOP #ltop ],
                            RELS.LIST < #altkeyrel >,
                            HCONS.LIST < > ],
                     CAT [ VAL [ SPR < [ LOCAL.CAT.HEAD det,
                                         OPT + ] >,
                                 COMPS olist,
                                 SUBJ olist,
                                 SPEC < > ],
                           HEAD noun &
                                [ PRON +,
                                  POSSESSOR possessor-pron-2,
                                  CASE poss-case ] ] ] ] ].

3rd-sg-possessive-noun-lex := poss-pron2-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM pl,
                                       PER 3rd ] ].

possessum-lex-rule-pron-2 := cat-change-only-lex-rule &
  [ SYNSEM.LOCAL.CAT [ HEAD #head &
                            [ POSSESSOR nonpossessive ],
                       POSSESSUM possessum-pron-2,
                       VAL [ SPEC #spec,
                             COMPS #comps,
                             SPR < [ LOCAL.CAT [ VAL.SPR < >,
                                                 HEAD +nd ] ] > ] ],
    DTR.SYNSEM.LOCAL.CAT [ HEAD #head &
                                [ PRON - ],
                           VAL [ COMPS #comps,
                                 SPEC #spec ] ] ].

;;; Verbs

verb-lex := non-mod-lex-item &
  [ SYNSEM [ L-QUE -,
             LOCAL.CAT [ HEAD verb,
                         HC-LIGHT - ] ] ].

main-verb-lex := verb-lex & basic-verb-lex & basic-non-wh-word-lex &
  [ SYNSEM [ L-QUE -,
             LOCAL [ CAT [ HEAD.AUX -,
                           VAL [ SPEC < >,
                                 SUBJ < #subj > ] ],
                     CONT.HOOK.XARG #xarg ] ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT cat-sat &
                               [ VAL [ SPR < >,
                                       COMPS < > ] ],
                           CONT.HOOK.INDEX #xarg ] ] ].

aux-lex := verb-lex & basic-icons-lex-item &
  [ SYNSEM [ LOCAL.CAT.HEAD.AUX +,
             L-QUE - ] ].

intransitive-verb-lex := main-verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE real-case ] ] > ].

transitive-verb-lex := main-verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE real-case ] ],
             #comps &
             [ LOCAL.CAT cat-sat &
                         [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun &
                                [ CASE real-case ] ] ] > ].

nom-intransitive-verb-lex := intransitive-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE nom ] ].

nom-acc-transitive-verb-lex := transitive-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE nom ] ],
             [ LOCAL.CAT.HEAD noun &
                              [ CASE acc ] ] > ].

verb4-verb-lex := transitive-verb-lex & verb-pc1-rule-dtr & verb-pc10-rule-dtr & verb-pc11-rule-dtr & verb-pc12-rule-dtr & verb-pc13-rule-dtr & verb-pc14-rule-dtr & verb-pc16-rule-dtr & verb-pc19-rule-dtr & verb-pc23-rule-dtr & verb-pc24-rule-dtr & verb-pc29-rule-dtr & verb-pc3-rule-dtr & verb-pc32-rule-dtr & verb-pc4-rule-dtr & verb-pc43-rule-dtr & verb-pc48-rule-dtr & verb-pc5-rule-dtr & verb-pc54-rule-dtr & verb-pc55-rule-dtr & verb-pc6-rule-dtr & verb-pc7-rule-dtr & verb-pc9-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom,
                           COMPS.FIRST.LOCAL.CAT.HEAD.CASE acc ] ].

verb6-verb-lex := transitive-verb-lex & verb-pc1-rule-dtr & verb-pc10-rule-dtr & verb-pc12-rule-dtr & verb-pc13-rule-dtr & verb-pc16-rule-dtr & verb-pc18-rule-dtr & verb-pc20-rule-dtr & verb-pc23-rule-dtr & verb-pc24-rule-dtr & verb-pc29-rule-dtr & verb-pc32-rule-dtr & verb-pc35-rule-dtr & verb-pc43-rule-dtr & verb-pc48-rule-dtr & verb-pc5-rule-dtr & verb-pc51-rule-dtr & verb-pc54-rule-dtr & verb-pc55-rule-dtr & verb-pc6-rule-dtr & verb-pc7-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom,
                           COMPS.FIRST.LOCAL.CAT.HEAD.CASE acc ] ].

verb20-verb-lex := transitive-verb-lex & verb-pc1-rule-dtr & verb-pc10-rule-dtr & verb-pc11-rule-dtr & verb-pc12-rule-dtr & verb-pc13-rule-dtr & verb-pc14-rule-dtr & verb-pc15-or-verb-pc50-rule-dtr & verb-pc16-rule-dtr & verb-pc18-rule-dtr & verb-pc19-rule-dtr & verb-pc20-rule-dtr & verb-pc23-rule-dtr & verb-pc24-rule-dtr & verb-pc27-rule-dtr & verb-pc29-rule-dtr & verb-pc32-rule-dtr & verb-pc33-rule-dtr & verb-pc38-rule-dtr & verb-pc4-rule-dtr & verb-pc40-rule-dtr & verb-pc43-rule-dtr & verb-pc44-or-verb-pc49-rule-dtr & verb-pc48-rule-dtr & verb-pc5-rule-dtr & verb-pc54-rule-dtr & verb-pc55-rule-dtr & verb-pc6-rule-dtr & verb-pc7-rule-dtr & verb-pc8-rule-dtr & verb-pc9-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom,
                           COMPS.FIRST.LOCAL.CAT.HEAD.CASE acc ] ].

verb29-verb-lex := transitive-verb-lex & verb-pc10-rule-dtr & verb-pc7-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom,
                           COMPS.FIRST.LOCAL.CAT.HEAD.CASE acc ] ].

verb41-verb-lex := intransitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom ].

verb43-verb-lex := transitive-verb-lex & verb-pc1-rule-dtr & verb-pc10-rule-dtr & verb-pc16-rule-dtr & verb-pc23-rule-dtr & verb-pc24-rule-dtr & verb-pc29-rule-dtr & verb-pc32-rule-dtr & verb-pc33-rule-dtr & verb-pc43-rule-dtr & verb-pc48-rule-dtr & verb-pc5-rule-dtr & verb-pc54-rule-dtr & verb-pc55-rule-dtr & verb-pc7-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom,
                           COMPS.FIRST.LOCAL.CAT.HEAD.CASE acc ] ].

verb46-verb-lex := transitive-verb-lex & verb-pc1-rule-dtr & verb-pc10-rule-dtr & verb-pc12-rule-dtr & verb-pc13-rule-dtr & verb-pc14-rule-dtr & verb-pc16-rule-dtr & verb-pc19-rule-dtr & verb-pc20-rule-dtr & verb-pc23-rule-dtr & verb-pc24-rule-dtr & verb-pc27-rule-dtr & verb-pc29-rule-dtr & verb-pc32-rule-dtr & verb-pc4-rule-dtr & verb-pc43-rule-dtr & verb-pc44-or-verb-pc49-rule-dtr & verb-pc48-rule-dtr & verb-pc5-rule-dtr & verb-pc54-rule-dtr & verb-pc55-rule-dtr & verb-pc6-rule-dtr & verb-pc7-rule-dtr & verb-pc9-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom,
                           COMPS.FIRST.LOCAL.CAT.HEAD.CASE acc ] ].

verb53-verb-lex := transitive-verb-lex & verb-pc1-rule-dtr & verb-pc10-rule-dtr & verb-pc12-rule-dtr & verb-pc14-rule-dtr & verb-pc16-rule-dtr & verb-pc19-rule-dtr & verb-pc20-rule-dtr & verb-pc23-rule-dtr & verb-pc24-rule-dtr & verb-pc27-rule-dtr & verb-pc29-rule-dtr & verb-pc3-rule-dtr & verb-pc32-rule-dtr & verb-pc4-rule-dtr & verb-pc43-rule-dtr & verb-pc48-rule-dtr & verb-pc5-rule-dtr & verb-pc54-rule-dtr & verb-pc55-rule-dtr & verb-pc7-rule-dtr & verb-pc9-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom,
                           COMPS.FIRST.LOCAL.CAT.HEAD.CASE acc ] ].

verb68-verb-lex := intransitive-verb-lex & verb-pc1-rule-dtr & verb-pc10-rule-dtr & verb-pc12-rule-dtr & verb-pc14-rule-dtr & verb-pc16-rule-dtr & verb-pc23-rule-dtr & verb-pc24-rule-dtr & verb-pc29-rule-dtr & verb-pc32-rule-dtr & verb-pc43-rule-dtr & verb-pc48-rule-dtr & verb-pc5-rule-dtr & verb-pc54-rule-dtr & verb-pc55-rule-dtr & verb-pc7-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom ].

verb69-verb-lex := intransitive-verb-lex & verb-pc1-rule-dtr & verb-pc10-rule-dtr & verb-pc12-rule-dtr & verb-pc14-rule-dtr & verb-pc16-rule-dtr & verb-pc19-rule-dtr & verb-pc20-rule-dtr & verb-pc23-rule-dtr & verb-pc24-rule-dtr & verb-pc27-rule-dtr & verb-pc29-rule-dtr & verb-pc32-rule-dtr & verb-pc33-rule-dtr & verb-pc4-rule-dtr & verb-pc43-rule-dtr & verb-pc48-rule-dtr & verb-pc5-rule-dtr & verb-pc54-rule-dtr & verb-pc55-rule-dtr & verb-pc7-rule-dtr & verb-pc8-rule-dtr & verb-pc9-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD.CASE acc ].

verb94-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom,
                           COMPS.FIRST.LOCAL.CAT.HEAD.CASE acc ] ].

verb105-verb-lex := transitive-verb-lex & verb-pc10-rule-dtr & verb-pc23-rule-dtr & verb-pc24-rule-dtr & verb-pc29-rule-dtr & verb-pc48-rule-dtr & verb-pc5-rule-dtr & verb-pc54-rule-dtr & verb-pc55-rule-dtr & verb-pc7-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom,
                           COMPS.FIRST.LOCAL.CAT.HEAD.CASE acc ] ].

verb131-verb-lex := transitive-verb-lex & verb-pc1-rule-dtr & verb-pc10-rule-dtr & verb-pc11-rule-dtr & verb-pc12-rule-dtr & verb-pc13-rule-dtr & verb-pc14-rule-dtr & verb-pc15-or-verb-pc50-rule-dtr & verb-pc16-rule-dtr & verb-pc18-rule-dtr & verb-pc19-rule-dtr & verb-pc20-rule-dtr & verb-pc23-rule-dtr & verb-pc24-rule-dtr & verb-pc27-rule-dtr & verb-pc29-rule-dtr & verb-pc32-rule-dtr & verb-pc33-rule-dtr & verb-pc4-rule-dtr & verb-pc43-rule-dtr & verb-pc48-rule-dtr & verb-pc5-rule-dtr & verb-pc54-rule-dtr & verb-pc55-rule-dtr & verb-pc6-rule-dtr & verb-pc7-rule-dtr & verb-pc8-rule-dtr & verb-pc9-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom,
                           COMPS.FIRST.LOCAL.CAT.HEAD.CASE acc ] ].

verb156-verb-lex := transitive-verb-lex & verb-pc51-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom,
                           COMPS.FIRST.LOCAL.CAT.HEAD.CASE acc ] ].

verb159-verb-lex := transitive-verb-lex & verb-pc1-rule-dtr & verb-pc10-rule-dtr & verb-pc13-rule-dtr & verb-pc16-rule-dtr & verb-pc20-rule-dtr & verb-pc23-rule-dtr & verb-pc24-rule-dtr & verb-pc29-rule-dtr & verb-pc32-rule-dtr & verb-pc35-rule-dtr & verb-pc43-rule-dtr & verb-pc48-rule-dtr & verb-pc5-rule-dtr & verb-pc54-rule-dtr & verb-pc55-rule-dtr & verb-pc6-rule-dtr & verb-pc7-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom,
                           COMPS.FIRST.LOCAL.CAT.HEAD.CASE acc ] ].

verb183-verb-lex := transitive-verb-lex & verb-pc32-rule-dtr & verb-pc43-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom,
                           COMPS.FIRST.LOCAL.CAT.HEAD.CASE acc ] ].

verb192-verb-lex := intransitive-verb-lex & verb-pc5-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom ].

verb194-verb-lex := transitive-verb-lex & verb-pc1-rule-dtr & verb-pc10-rule-dtr & verb-pc12-rule-dtr & verb-pc16-rule-dtr & verb-pc19-rule-dtr & verb-pc23-rule-dtr & verb-pc24-rule-dtr & verb-pc29-rule-dtr & verb-pc32-rule-dtr & verb-pc38-rule-dtr & verb-pc40-rule-dtr & verb-pc43-rule-dtr & verb-pc48-rule-dtr & verb-pc5-rule-dtr & verb-pc54-rule-dtr & verb-pc55-rule-dtr & verb-pc7-rule-dtr & verb-pc9-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom,
                           COMPS.FIRST.LOCAL.CAT.HEAD.CASE acc ] ].

verb195-verb-lex := transitive-verb-lex & verb-pc1-rule-dtr & verb-pc10-rule-dtr & verb-pc16-rule-dtr & verb-pc23-rule-dtr & verb-pc24-rule-dtr & verb-pc29-rule-dtr & verb-pc32-rule-dtr & verb-pc43-rule-dtr & verb-pc48-rule-dtr & verb-pc5-rule-dtr & verb-pc54-rule-dtr & verb-pc55-rule-dtr & verb-pc7-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom,
                           COMPS.FIRST.LOCAL.CAT.HEAD.CASE acc ] ].

verb218-verb-lex := transitive-verb-lex & verb-pc1-rule-dtr & verb-pc10-rule-dtr & verb-pc16-rule-dtr & verb-pc20-rule-dtr & verb-pc23-rule-dtr & verb-pc24-rule-dtr & verb-pc29-rule-dtr & verb-pc32-rule-dtr & verb-pc43-rule-dtr & verb-pc48-rule-dtr & verb-pc5-rule-dtr & verb-pc54-rule-dtr & verb-pc55-rule-dtr & verb-pc7-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom,
                           COMPS.FIRST.LOCAL.CAT.HEAD.CASE acc ] ].

verb220-verb-lex := transitive-verb-lex & verb-pc1-rule-dtr & verb-pc10-rule-dtr & verb-pc7-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom,
                           COMPS.FIRST.LOCAL.CAT.HEAD.CASE acc ] ].

verb233-verb-lex := transitive-verb-lex & verb-pc5-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom,
                           COMPS.FIRST.LOCAL.CAT.HEAD.CASE acc ] ].

verb234-verb-lex := transitive-verb-lex.

;;; Auxiliaries

arg-comp-aux := aux-lex & non-local-none-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPEC < >,
                             COMPS < #comps . #vcomps >,
                             SUBJ < #subj &
                                    [ LOCAL.CAT.HEAD.CASE real-case ] > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CAT [ HEAD noun,
                             VAL [ SUBJ < >,
                                   SPR < >,
                                   SPEC < >,
                                   COMPS < > ] ],
                       CONT.HOOK.INDEX #xarg ] ],
             #comps &
             [ LIGHT +,
               LOCAL [ CAT [ VAL [ SUBJ < [ ] >,
                                   COMPS #vcomps ],
                             HEAD verb ],
                       CONT.HOOK.XARG #xarg ] ] > ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Not inheriting from basic-verb-lex, so need to put in
; event-relation by hand here.

arg-comp-aux-with-pred := arg-comp-aux & hcons-lex-item &
  [ SYNSEM [ LOCAL.CONT.HCONS.LIST < qeq &
                                     [ HARG #harg,
                                       LARG #larg ] >,
             LKEYS.KEYREL event-relation &
                          [ ARG1 #harg ] ],
    ARG-ST < [ ],
             [ LOCAL.CONT.HOOK.LTOP #larg ] > ].

aux1-aux-lex := arg-comp-aux-with-pred & verb-pc59-rule-dtr & verb-pc60-rule-dtr &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.ASPECT ipfv,
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ],
    INFLECTED.VERB-PC59-OR-VERB-PC60-FLAG - ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Not inheriting from basic-verb-lex, so need to put in
; event-relation by hand here.

aux2-aux-lex := arg-comp-aux-with-pred & verb-pc61-rule-dtr & verb-pc62-rule-dtr &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E [ TENSE fut,
                                       ASPECT ipfv+pfv+prosp ],
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ],
    INFLECTED.VERB-PC61-OR-VERB-PC62-FLAG - ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Not inheriting from basic-verb-lex, so need to put in
; event-relation by hand here.

aux3-aux-lex := arg-comp-aux-with-pred &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.ASPECT ipfv+pfv,
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ] ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Not inheriting from basic-verb-lex, so need to put in
; event-relation by hand here.

aux4-aux-lex := arg-comp-aux-with-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Not inheriting from basic-verb-lex, so need to put in
; event-relation by hand here.

aux5-aux-lex := arg-comp-aux-with-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Not inheriting from basic-verb-lex, so need to put in
; event-relation by hand here.

aux6-aux-lex := arg-comp-aux-with-pred &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E [ TENSE fut,
                                       ASPECT ipfv+pfv+prosp ],
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ] ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Not inheriting from basic-verb-lex, so need to put in
; event-relation by hand here.

aux7-aux-lex := arg-comp-aux-with-pred &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.ASPECT ipfv+pfv,
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ] ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Not inheriting from basic-verb-lex, so need to put in
; event-relation by hand here.

aux8-aux-lex := arg-comp-aux-with-pred &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E [ TENSE fut,
                                       ASPECT pfv,
                                       MOOD sbjv ],
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ] ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

arg-comp-aux-no-pred := arg-comp-aux & raise-sem-lex-item &
  [ ARG-ST < [ ],
             [ LOCAL.CAT.HEAD.AUX - ] > ].

aux9-aux-lex := arg-comp-aux-no-pred &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E [ TENSE fut,
                                       ASPECT cmpl+incep+pfv ],
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ] ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Not inheriting from basic-verb-lex, so need to put in
; event-relation by hand here.

aux10-aux-lex := arg-comp-aux-with-pred &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.ASPECT ipfv,
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ] ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

aux11-aux-lex := arg-comp-aux-no-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Not inheriting from basic-verb-lex, so need to put in
; event-relation by hand here.

neg12-aux-lex := arg-comp-aux-with-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

aux13-aux-lex := arg-comp-aux-no-pred & verb-pc59-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite,
    INFLECTED.VERB-PC59-FLAG - ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

aux14-aux-lex := arg-comp-aux-no-pred &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E [ ASPECT ipfv,
                                       MOOD imp ],
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ] ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

aux15-aux-lex := arg-comp-aux-no-pred & verb-pc60-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite,
    INFLECTED.VERB-PC60-FLAG - ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

aux16-aux-lex := arg-comp-aux-no-pred &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.ASPECT ipfv,
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ] ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

aux17-aux-lex := arg-comp-aux-no-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

aux18-aux-lex := arg-comp-aux-no-pred &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.ASPECT pfv,
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ] ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

aux19-aux-lex := arg-comp-aux-no-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

aux20-aux-lex := arg-comp-aux-no-pred & verb-pc61-rule-dtr &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.ASPECT rel,
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ],
    INFLECTED.VERB-PC61-FLAG - ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

aux21-aux-lex := arg-comp-aux-no-pred &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.TENSE fut,
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ] ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

aux22-aux-lex := arg-comp-aux-no-pred &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.TENSE fut,
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ] ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

aux23-aux-lex := arg-comp-aux-no-pred & verb-pc62-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite,
    INFLECTED.VERB-PC62-FLAG - ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

aux24-aux-lex := arg-comp-aux-no-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

aux25-aux-lex := arg-comp-aux-no-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

aux26-aux-lex := arg-comp-aux-no-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

aux27-aux-lex := arg-comp-aux-no-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

aux28-aux-lex := arg-comp-aux-no-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

aux29-aux-lex := arg-comp-aux-no-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

aux30-aux-lex := arg-comp-aux-no-pred &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.ASPECT pot,
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ] ].

;;; Complementizers

;;; Others

;;; Determiners
;;; SPEC is non-empty, and already specified by basic-determiner-lex.

determiner-lex := basic-determiner-lex & basic-non-wh-word-lex & norm-zero-arg & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
                           COMPS < >,
                           SUBJ < > ] ].

det1-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.L-QUE - ].

det2-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.L-QUE - ].

det3-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.L-QUE - ].

det4-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.L-QUE - ].

det5-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.L-QUE - ].

det6-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM [ L-QUE -,
             LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM pl ] ].

det7-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.L-QUE - ].

det8-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.L-QUE - ].

det9-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.L-QUE - ].

det10-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.L-QUE - ].

det11-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM [ L-QUE -,
             LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 3rd,
                                                                  NUM pl ] ] ].

det12-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM [ L-QUE -,
             LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 1st,
                                                                  NUM sg ] ] ].

det13-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM [ L-QUE -,
             LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM pl ] ].

det14-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM [ L-QUE -,
             LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CAT.HEAD.CASE gen ] ].

det15-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM [ L-QUE -,
             LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CAT.HEAD.CASE all ] ].

det16-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.L-QUE - ].

det17-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.L-QUE - ].

det18-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.L-QUE - ].

det19-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.L-QUE - ].

det20-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.L-QUE - ].

det21-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM [ L-QUE -,
             LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM pl ] ].

det22-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.L-QUE - ].

det23-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM [ L-QUE -,
             LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 3rd,
                                                                  NUM sg ] ] ].

det24-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.L-QUE - ].

;;; Adverbs

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

;;; Intermediate rule types

verb-pc23-rule-dtr := word-or-lexrule.
verb-pc60-rule-dtr := word-or-lexrule.
verb-pc20-rule-dtr := word-or-lexrule.
noun-pc5-rule-dtr := word-or-lexrule.
verb-pc10-rule-dtr := word-or-lexrule.
verb-pc54-rule-dtr := word-or-lexrule.
verb-pc35-rule-dtr := word-or-lexrule.
verb-pc9-rule-dtr := word-or-lexrule.
verb-pc1-rule-dtr := word-or-lexrule.
verb-pc32-rule-dtr := word-or-lexrule.
verb-pc16-rule-dtr := word-or-lexrule.
noun-pc14-rule-dtr := word-or-lexrule.
verb-pc51-rule-dtr := word-or-lexrule.
noun-pc21-rule-dtr := word-or-lexrule.
verb-pc24-rule-dtr := word-or-lexrule.
noun-pc9-rule-dtr := word-or-lexrule.
noun-pc10-rule-dtr := word-or-lexrule.
verb-pc43-rule-dtr := word-or-lexrule.
verb-pc40-rule-dtr := word-or-lexrule.
verb-pc44-or-verb-pc49-rule-dtr := word-or-lexrule.
verb-pc33-rule-dtr := word-or-lexrule.
verb-pc38-rule-dtr := word-or-lexrule.
verb-pc7-rule-dtr := word-or-lexrule.
verb-pc11-rule-dtr := word-or-lexrule.
verb-pc13-rule-dtr := word-or-lexrule.
verb-pc55-rule-dtr := word-or-lexrule.
verb-pc62-rule-dtr := word-or-lexrule.
verb-pc12-rule-dtr := word-or-lexrule.
verb-pc27-rule-dtr := word-or-lexrule.
verb-pc48-rule-dtr := word-or-lexrule.
verb-pc29-rule-dtr := word-or-lexrule.
verb-pc8-rule-dtr := word-or-lexrule.
verb-pc4-rule-dtr := word-or-lexrule.
verb-pc18-rule-dtr := word-or-lexrule.
noun-pc4-rule-dtr := word-or-lexrule.
verb-pc59-rule-dtr := word-or-lexrule.
verb-pc14-rule-dtr := word-or-lexrule.
noun-pc16-rule-dtr := word-or-lexrule.
verb-pc3-rule-dtr := word-or-lexrule.
noun-pc12-rule-dtr := word-or-lexrule.
verb-pc19-rule-dtr := word-or-lexrule.
noun-pc1-rule-dtr := word-or-lexrule.
verb-pc5-rule-dtr := word-or-lexrule.
noun-pc7-rule-dtr := word-or-lexrule.
noun-pc15-or-noun-pc19-or-noun-pc3-rule-dtr := word-or-lexrule.
verb-pc15-or-verb-pc50-rule-dtr := word-or-lexrule.
verb-pc6-rule-dtr := word-or-lexrule.
noun-pc2-rule-dtr := word-or-lexrule.
verb-pc61-rule-dtr := word-or-lexrule.

;;; Lexical rule types

noun-pc1-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & noun-pc10-rule-dtr & noun-pc2-rule-dtr &
  [ INFLECTED #infl,
    DTR noun-pc1-rule-dtr &
        [ INFLECTED #infl ] ].

noun-pc1_lrt1-lex-rule := noun-pc1-lex-rule-super.

noun-pc2-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & noun-pc10-rule-dtr &
  [ INFLECTED #infl,
    DTR noun-pc2-rule-dtr &
        [ INFLECTED #infl ] ].

noun-pc2_lrt1-lex-rule := noun-pc2-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE acc ].

noun-pc3-lex-rule-super := add-only-no-ccont-rule & noun-pc1-rule-dtr & noun-pc10-rule-dtr & noun-pc14-rule-dtr & noun-pc16-rule-dtr & noun-pc2-rule-dtr & noun-pc21-rule-dtr & noun-pc5-rule-dtr &
  [ INFLECTED #infl,
    DTR noun-pc15-or-noun-pc19-or-noun-pc3-rule-dtr &
        [ INFLECTED #infl ] ].

noun-pc3_lrt1-lex-rule := infl-lex-rule & noun-pc3-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE gen ].

noun-pc3_lrt2-lex-rule := infl-lex-rule & noun-pc3-lex-rule-super &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE ins,
                   CONT.HOOK.INDEX.PNG.NUM pl ] ].

noun-pc3_lrt3-lex-rule := const-lex-rule & noun-pc3-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM sg ].

noun-pc3_lrt4-lex-rule := infl-lex-rule & noun-pc3-lex-rule-super.

noun-pc3_lrt5-lex-rule := infl-lex-rule & noun-pc3-lex-rule-super &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG.NUM sg,
                   CAT.HEAD.CASE nom ] ].

noun-pc4-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & noun-pc10-rule-dtr & noun-pc16-rule-dtr & noun-pc2-rule-dtr & noun-pc5-rule-dtr &
  [ INFLECTED #infl,
    DTR noun-pc4-rule-dtr &
        [ INFLECTED #infl ] ].

noun-pc4_lrt1-lex-rule := noun-pc4-lex-rule-super.

noun-pc5-lex-rule-super := add-only-no-ccont-rule & noun-pc10-rule-dtr & noun-pc16-rule-dtr & noun-pc2-rule-dtr &
  [ INFLECTED [ NOUN-PC5-FLAG +,
                VERB-PC61-OR-VERB-PC62-FLAG #verb-pc61-or-verb-pc62,
                VERB-PC60-FLAG #verb-pc60,
                VERB-PC62-FLAG #verb-pc62,
                VERB-PC59-FLAG #verb-pc59,
                VERB-PC59-OR-VERB-PC60-FLAG #verb-pc59-or-verb-pc60,
                VERB-PC61-FLAG #verb-pc61 ],
    DTR noun-pc5-rule-dtr &
        [ INFLECTED [ VERB-PC61-OR-VERB-PC62-FLAG #verb-pc61-or-verb-pc62,
                      VERB-PC60-FLAG #verb-pc60,
                      VERB-PC62-FLAG #verb-pc62,
                      VERB-PC59-FLAG #verb-pc59,
                      VERB-PC59-OR-VERB-PC60-FLAG #verb-pc59-or-verb-pc60,
                      VERB-PC61-FLAG #verb-pc61 ] ] ].

noun-pc5_lrt1-lex-rule := infl-lex-rule & noun-pc5-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM pl ].

noun-pc5_lrt2-lex-rule := const-lex-rule & noun-pc5-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM sg ].

noun-pc7-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & noun-pc1-rule-dtr & noun-pc10-rule-dtr & noun-pc2-rule-dtr &
  [ INFLECTED #infl,
    DTR noun-pc7-rule-dtr &
        [ INFLECTED #infl ] ].

noun-pc7_lrt1-lex-rule := noun-pc7-lex-rule-super.

noun-pc8-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & noun-pc9-rule-dtr &
  [ INFLECTED #infl,
    DTR noun17-noun-lex &
        [ INFLECTED #infl ] ].

noun-pc8_lrt1-lex-rule := noun-pc8-lex-rule-super.

noun-pc9-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR noun-pc9-rule-dtr &
        [ INFLECTED #infl ] ].

noun-pc9_lrt1-lex-rule := noun-pc9-lex-rule-super.

noun-pc10-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR noun-pc10-rule-dtr &
        [ INFLECTED #infl ] ].

noun-pc10_lrt1-lex-rule := noun-pc10-lex-rule-super.

noun-pc12-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & noun-pc1-rule-dtr & noun-pc10-rule-dtr & noun-pc16-rule-dtr & noun-pc2-rule-dtr & noun-pc5-rule-dtr &
  [ INFLECTED #infl,
    DTR noun-pc12-rule-dtr &
        [ INFLECTED #infl ] ].

noun-pc12_lrt1-lex-rule := noun-pc12-lex-rule-super.

noun-pc13-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & noun-pc1-rule-dtr & noun-pc10-rule-dtr & noun-pc12-rule-dtr & noun-pc16-rule-dtr & noun-pc2-rule-dtr & noun-pc4-rule-dtr & noun-pc5-rule-dtr &
  [ INFLECTED #infl,
    DTR noun33-noun-lex &
        [ INFLECTED #infl ] ].

noun-pc13_lrt1-lex-rule := noun-pc13-lex-rule-super.

noun-pc14-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & noun-pc1-rule-dtr & noun-pc10-rule-dtr & noun-pc16-rule-dtr & noun-pc2-rule-dtr & noun-pc21-rule-dtr & noun-pc5-rule-dtr &
  [ INFLECTED #infl,
    DTR noun-pc14-rule-dtr &
        [ INFLECTED #infl ] ].

noun-pc14_lrt1-lex-rule := noun-pc14-lex-rule-super.

noun-pc15-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR noun-pc15-or-noun-pc19-or-noun-pc3-rule-dtr &
        [ INFLECTED #infl ] ].

noun-pc15_lrt1-lex-rule := noun-pc15-lex-rule-super.

noun-pc16-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR noun-pc16-rule-dtr &
        [ INFLECTED #infl ] ].

noun-pc16_lrt1-lex-rule := noun-pc16-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE acc ].

noun-pc16_lrt2-lex-rule := noun-pc16-lex-rule-super.

noun-pc18-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR noun81-noun-lex &
        [ INFLECTED #infl ] ].

noun-pc18_lrt1-lex-rule := noun-pc18-lex-rule-super.

noun-pc19-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR noun-pc15-or-noun-pc19-or-noun-pc3-rule-dtr &
        [ INFLECTED #infl ] ].

noun-pc19_lrt1-lex-rule := noun-pc19-lex-rule-super.

noun-pc21-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR noun-pc21-rule-dtr &
        [ INFLECTED #infl ] ].

noun-pc21_lrt1-lex-rule := noun-pc21-lex-rule-super.

noun-pc23-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & noun-pc1-rule-dtr & noun-pc10-rule-dtr & noun-pc14-rule-dtr & noun-pc16-rule-dtr & noun-pc2-rule-dtr & noun-pc21-rule-dtr & noun-pc5-rule-dtr &
  [ INFLECTED #infl,
    DTR noun95-noun-lex &
        [ INFLECTED #infl ] ].

noun-pc23_lrt1-lex-rule := noun-pc23-lex-rule-super.

noun-pc24-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR noun98-noun-lex &
        [ INFLECTED #infl ] ].

noun-pc24_lrt1-lex-rule := noun-pc24-lex-rule-super.

noun-pc26-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & noun-pc1-rule-dtr & noun-pc10-rule-dtr & noun-pc2-rule-dtr & noun-pc7-rule-dtr &
  [ INFLECTED #infl,
    DTR noun98-noun-lex &
        [ INFLECTED #infl ] ].

noun-pc26_lrt1-lex-rule := noun-pc26-lex-rule-super.

verb-pc1-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR verb-pc1-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc1_lrt1-lex-rule := verb-pc1-lex-rule-super.

verb-pc2-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc1-rule-dtr & verb-pc10-rule-dtr & verb-pc3-rule-dtr & verb-pc4-rule-dtr & verb-pc7-rule-dtr &
  [ INFLECTED #infl,
    DTR verb4-verb-lex &
        [ INFLECTED #infl ] ].

verb-pc2_lrt1-lex-rule := verb-pc2-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 3rd,
                                                                NUM sg ] ].

verb-pc3-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR verb-pc3-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc3_lrt1-lex-rule := verb-pc3-lex-rule-super.

verb-pc4-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc1-rule-dtr & verb-pc10-rule-dtr & verb-pc7-rule-dtr &
  [ INFLECTED #infl,
    DTR verb-pc4-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc4_lrt1-lex-rule := verb-pc4-lex-rule-super.

verb-pc5-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR verb-pc5-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc5_lrt1-lex-rule := verb-pc5-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E [ TENSE pst,
                                     ASPECT ipfv ] ].

verb-pc6-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc1-rule-dtr & verb-pc10-rule-dtr & verb-pc16-rule-dtr & verb-pc23-rule-dtr & verb-pc24-rule-dtr & verb-pc29-rule-dtr & verb-pc32-rule-dtr & verb-pc43-rule-dtr & verb-pc48-rule-dtr & verb-pc5-rule-dtr & verb-pc54-rule-dtr & verb-pc55-rule-dtr & verb-pc7-rule-dtr &
  [ INFLECTED #infl,
    DTR verb-pc6-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc6_lrt1-lex-rule := verb-pc6-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.MOOD sbjv ].

verb-pc6_lrt2-lex-rule := verb-pc6-lex-rule-super.

verb-pc7-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR verb-pc7-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc7_lrt1-lex-rule := verb-pc7-lex-rule-super.

verb-pc7_lrt2-lex-rule := verb-pc7-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT ipfv ].

verb-pc8-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc1-rule-dtr & verb-pc10-rule-dtr & verb-pc12-rule-dtr & verb-pc14-rule-dtr & verb-pc16-rule-dtr & verb-pc19-rule-dtr & verb-pc20-rule-dtr & verb-pc23-rule-dtr & verb-pc24-rule-dtr & verb-pc27-rule-dtr & verb-pc29-rule-dtr & verb-pc32-rule-dtr & verb-pc33-rule-dtr & verb-pc4-rule-dtr & verb-pc43-rule-dtr & verb-pc48-rule-dtr & verb-pc5-rule-dtr & verb-pc54-rule-dtr & verb-pc55-rule-dtr & verb-pc7-rule-dtr & verb-pc9-rule-dtr &
  [ INFLECTED #infl,
    DTR verb-pc8-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc8_lrt1-lex-rule := verb-pc8-lex-rule-super.

verb-pc9-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc1-rule-dtr & verb-pc10-rule-dtr & verb-pc12-rule-dtr & verb-pc16-rule-dtr & verb-pc19-rule-dtr & verb-pc23-rule-dtr & verb-pc24-rule-dtr & verb-pc29-rule-dtr & verb-pc32-rule-dtr & verb-pc43-rule-dtr & verb-pc48-rule-dtr & verb-pc5-rule-dtr & verb-pc54-rule-dtr & verb-pc55-rule-dtr & verb-pc7-rule-dtr &
  [ INFLECTED #infl,
    DTR verb-pc9-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc9_lrt1-lex-rule := verb-pc9-lex-rule-super.

verb-pc10-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc7-rule-dtr &
  [ INFLECTED #infl,
    DTR verb-pc10-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc10_lrt1-lex-rule := verb-pc10-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT pfv ].

verb-pc11-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc1-rule-dtr & verb-pc10-rule-dtr & verb-pc12-rule-dtr & verb-pc13-rule-dtr & verb-pc14-rule-dtr & verb-pc16-rule-dtr & verb-pc19-rule-dtr & verb-pc23-rule-dtr & verb-pc24-rule-dtr & verb-pc29-rule-dtr & verb-pc32-rule-dtr & verb-pc43-rule-dtr & verb-pc48-rule-dtr & verb-pc5-rule-dtr & verb-pc54-rule-dtr & verb-pc55-rule-dtr & verb-pc6-rule-dtr & verb-pc7-rule-dtr & verb-pc9-rule-dtr &
  [ INFLECTED #infl,
    DTR verb-pc11-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc11_lrt1-lex-rule := verb-pc11-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 3rd,
                                                                NUM pl ] ].

verb-pc12-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc24-rule-dtr & verb-pc54-rule-dtr & verb-pc55-rule-dtr &
  [ INFLECTED #infl,
    DTR verb-pc12-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc12_lrt1-lex-rule := verb-pc12-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE fut ].

verb-pc13-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc1-rule-dtr & verb-pc10-rule-dtr & verb-pc16-rule-dtr & verb-pc23-rule-dtr & verb-pc24-rule-dtr & verb-pc29-rule-dtr & verb-pc32-rule-dtr & verb-pc43-rule-dtr & verb-pc48-rule-dtr & verb-pc5-rule-dtr & verb-pc54-rule-dtr & verb-pc55-rule-dtr & verb-pc6-rule-dtr & verb-pc7-rule-dtr &
  [ INFLECTED #infl,
    DTR verb-pc13-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc13_lrt1-lex-rule := verb-pc13-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT prosp ].

verb-pc14-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc1-rule-dtr & verb-pc10-rule-dtr & verb-pc12-rule-dtr & verb-pc16-rule-dtr & verb-pc23-rule-dtr & verb-pc24-rule-dtr & verb-pc29-rule-dtr & verb-pc32-rule-dtr & verb-pc43-rule-dtr & verb-pc48-rule-dtr & verb-pc5-rule-dtr & verb-pc54-rule-dtr & verb-pc55-rule-dtr & verb-pc7-rule-dtr &
  [ INFLECTED #infl,
    DTR verb-pc14-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc14_lrt1-lex-rule := verb-pc14-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT incep ].

verb-pc14_lrt2-lex-rule := verb-pc14-lex-rule-super.

verb-pc14_lrt3-lex-rule := verb-pc14-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE fut ].

verb-pc15-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc1-rule-dtr & verb-pc10-rule-dtr & verb-pc11-rule-dtr & verb-pc12-rule-dtr & verb-pc13-rule-dtr & verb-pc14-rule-dtr & verb-pc16-rule-dtr & verb-pc18-rule-dtr & verb-pc19-rule-dtr & verb-pc20-rule-dtr & verb-pc23-rule-dtr & verb-pc24-rule-dtr & verb-pc27-rule-dtr & verb-pc29-rule-dtr & verb-pc32-rule-dtr & verb-pc33-rule-dtr & verb-pc4-rule-dtr & verb-pc43-rule-dtr & verb-pc48-rule-dtr & verb-pc5-rule-dtr & verb-pc54-rule-dtr & verb-pc55-rule-dtr & verb-pc6-rule-dtr & verb-pc7-rule-dtr & verb-pc8-rule-dtr & verb-pc9-rule-dtr &
  [ INFLECTED #infl,
    DTR verb-pc15-or-verb-pc50-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc15_lrt1-lex-rule := verb-pc15-lex-rule-super.

verb-pc16-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc1-rule-dtr & verb-pc10-rule-dtr & verb-pc23-rule-dtr & verb-pc24-rule-dtr & verb-pc29-rule-dtr & verb-pc32-rule-dtr & verb-pc43-rule-dtr & verb-pc48-rule-dtr & verb-pc5-rule-dtr & verb-pc54-rule-dtr & verb-pc55-rule-dtr & verb-pc7-rule-dtr &
  [ INFLECTED #infl,
    DTR verb-pc16-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc16_lrt1-lex-rule := verb-pc16-lex-rule-super.

verb-pc18-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc1-rule-dtr & verb-pc10-rule-dtr & verb-pc16-rule-dtr & verb-pc20-rule-dtr & verb-pc23-rule-dtr & verb-pc24-rule-dtr & verb-pc29-rule-dtr & verb-pc32-rule-dtr & verb-pc43-rule-dtr & verb-pc48-rule-dtr & verb-pc5-rule-dtr & verb-pc54-rule-dtr & verb-pc55-rule-dtr & verb-pc7-rule-dtr &
  [ INFLECTED #infl,
    DTR verb-pc18-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc18_lrt1-lex-rule := verb-pc18-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM pl ].

verb-pc18_lrt2-lex-rule := verb-pc18-lex-rule-super.

verb-pc19-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc1-rule-dtr & verb-pc10-rule-dtr & verb-pc12-rule-dtr & verb-pc16-rule-dtr & verb-pc23-rule-dtr & verb-pc24-rule-dtr & verb-pc29-rule-dtr & verb-pc32-rule-dtr & verb-pc43-rule-dtr & verb-pc48-rule-dtr & verb-pc5-rule-dtr & verb-pc54-rule-dtr & verb-pc55-rule-dtr & verb-pc7-rule-dtr &
  [ INFLECTED #infl,
    DTR verb-pc19-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc19_lrt1-lex-rule := verb-pc19-lex-rule-super.

verb-pc20-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc1-rule-dtr & verb-pc10-rule-dtr & verb-pc16-rule-dtr & verb-pc23-rule-dtr & verb-pc24-rule-dtr & verb-pc29-rule-dtr & verb-pc32-rule-dtr & verb-pc43-rule-dtr & verb-pc48-rule-dtr & verb-pc5-rule-dtr & verb-pc54-rule-dtr & verb-pc55-rule-dtr & verb-pc7-rule-dtr &
  [ INFLECTED #infl,
    DTR verb-pc20-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc20_lrt1-lex-rule := verb-pc20-lex-rule-super.

verb-pc21-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR verb20-verb-lex &
        [ INFLECTED #infl ] ].

verb-pc21_lrt1-lex-rule := verb-pc21-lex-rule-super.

verb-pc23-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR verb-pc23-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc23_lrt1-lex-rule := verb-pc23-lex-rule-super.

verb-pc24-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc54-rule-dtr & verb-pc55-rule-dtr &
  [ INFLECTED #infl,
    DTR verb-pc24-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc24_lrt1-lex-rule := verb-pc24-lex-rule-super.

verb-pc27-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc1-rule-dtr & verb-pc10-rule-dtr & verb-pc12-rule-dtr & verb-pc14-rule-dtr & verb-pc16-rule-dtr & verb-pc19-rule-dtr & verb-pc20-rule-dtr & verb-pc23-rule-dtr & verb-pc24-rule-dtr & verb-pc29-rule-dtr & verb-pc32-rule-dtr & verb-pc4-rule-dtr & verb-pc43-rule-dtr & verb-pc48-rule-dtr & verb-pc5-rule-dtr & verb-pc54-rule-dtr & verb-pc55-rule-dtr & verb-pc7-rule-dtr & verb-pc9-rule-dtr &
  [ INFLECTED #infl,
    DTR verb-pc27-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc27_lrt1-lex-rule := verb-pc27-lex-rule-super.

verb-pc29-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc10-rule-dtr & verb-pc23-rule-dtr & verb-pc24-rule-dtr & verb-pc48-rule-dtr & verb-pc5-rule-dtr & verb-pc54-rule-dtr & verb-pc55-rule-dtr & verb-pc7-rule-dtr &
  [ INFLECTED #infl,
    DTR verb-pc29-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc29_lrt1-lex-rule := verb-pc29-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT cmpl ].

verb-pc31-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc10-rule-dtr & verb-pc7-rule-dtr &
  [ INFLECTED #infl,
    DTR verb29-verb-lex &
        [ INFLECTED #infl ] ].

verb-pc31_lrt1-lex-rule := verb-pc31-lex-rule-super.

verb-pc32-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc43-rule-dtr &
  [ INFLECTED #infl,
    DTR verb-pc32-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc32_lrt1-lex-rule := verb-pc32-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.MOOD irr ].

verb-pc32_lrt2-lex-rule := verb-pc32-lex-rule-super.

verb-pc33-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc1-rule-dtr & verb-pc10-rule-dtr & verb-pc16-rule-dtr & verb-pc23-rule-dtr & verb-pc24-rule-dtr & verb-pc29-rule-dtr & verb-pc32-rule-dtr & verb-pc43-rule-dtr & verb-pc48-rule-dtr & verb-pc5-rule-dtr & verb-pc54-rule-dtr & verb-pc55-rule-dtr & verb-pc7-rule-dtr &
  [ INFLECTED #infl,
    DTR verb-pc33-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc33_lrt1-lex-rule := verb-pc33-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.MOOD ind ].

verb-pc35-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc1-rule-dtr & verb-pc10-rule-dtr & verb-pc13-rule-dtr & verb-pc16-rule-dtr & verb-pc20-rule-dtr & verb-pc23-rule-dtr & verb-pc24-rule-dtr & verb-pc29-rule-dtr & verb-pc32-rule-dtr & verb-pc43-rule-dtr & verb-pc48-rule-dtr & verb-pc5-rule-dtr & verb-pc54-rule-dtr & verb-pc55-rule-dtr & verb-pc6-rule-dtr & verb-pc7-rule-dtr &
  [ INFLECTED #infl,
    DTR verb-pc35-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc35_lrt1-lex-rule := verb-pc35-lex-rule-super.

verb-pc37-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc10-rule-dtr & verb-pc23-rule-dtr & verb-pc24-rule-dtr & verb-pc29-rule-dtr & verb-pc48-rule-dtr & verb-pc5-rule-dtr & verb-pc54-rule-dtr & verb-pc55-rule-dtr & verb-pc7-rule-dtr &
  [ INFLECTED #infl,
    DTR verb20-verb-lex &
        [ INFLECTED #infl ] ].

verb-pc37_lrt1-lex-rule := verb-pc37-lex-rule-super.

verb-pc38-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc1-rule-dtr & verb-pc10-rule-dtr & verb-pc12-rule-dtr & verb-pc16-rule-dtr & verb-pc19-rule-dtr & verb-pc23-rule-dtr & verb-pc24-rule-dtr & verb-pc29-rule-dtr & verb-pc32-rule-dtr & verb-pc40-rule-dtr & verb-pc43-rule-dtr & verb-pc48-rule-dtr & verb-pc5-rule-dtr & verb-pc54-rule-dtr & verb-pc55-rule-dtr & verb-pc7-rule-dtr & verb-pc9-rule-dtr &
  [ INFLECTED #infl,
    DTR verb-pc38-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc38_lrt1-lex-rule := verb-pc38-lex-rule-super.

verb-pc40-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR verb-pc40-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc40_lrt1-lex-rule := verb-pc40-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 2nd,
                                                                NUM pl ] ].

verb-pc41-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR verb41-verb-lex &
        [ INFLECTED #infl ] ].

verb-pc41_lrt1-lex-rule := verb-pc41-lex-rule-super.

verb-pc43-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR verb-pc43-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc43_lrt1-lex-rule := verb-pc43-lex-rule-super.

verb-pc44-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR verb-pc44-or-verb-pc49-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc44_lrt1-lex-rule := verb-pc44-lex-rule-super.

verb-pc46-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc1-rule-dtr & verb-pc10-rule-dtr & verb-pc12-rule-dtr & verb-pc14-rule-dtr & verb-pc16-rule-dtr & verb-pc19-rule-dtr & verb-pc20-rule-dtr & verb-pc23-rule-dtr & verb-pc24-rule-dtr & verb-pc27-rule-dtr & verb-pc29-rule-dtr & verb-pc32-rule-dtr & verb-pc4-rule-dtr & verb-pc43-rule-dtr & verb-pc48-rule-dtr & verb-pc5-rule-dtr & verb-pc54-rule-dtr & verb-pc55-rule-dtr & verb-pc7-rule-dtr & verb-pc9-rule-dtr &
  [ INFLECTED #infl,
    DTR verb53-verb-lex &
        [ INFLECTED #infl ] ].

verb-pc46_lrt1-lex-rule := verb-pc46-lex-rule-super.

verb-pc47-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR verb94-verb-lex &
        [ INFLECTED #infl ] ].

verb-pc47_lrt1-lex-rule := verb-pc47-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM pl ].

verb-pc48-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc10-rule-dtr & verb-pc24-rule-dtr & verb-pc54-rule-dtr & verb-pc55-rule-dtr & verb-pc7-rule-dtr &
  [ INFLECTED #infl,
    DTR verb-pc48-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc48_lrt1-lex-rule := verb-pc48-lex-rule-super.

verb-pc49-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc1-rule-dtr & verb-pc10-rule-dtr & verb-pc12-rule-dtr & verb-pc14-rule-dtr & verb-pc16-rule-dtr & verb-pc19-rule-dtr & verb-pc20-rule-dtr & verb-pc23-rule-dtr & verb-pc24-rule-dtr & verb-pc27-rule-dtr & verb-pc29-rule-dtr & verb-pc32-rule-dtr & verb-pc4-rule-dtr & verb-pc43-rule-dtr & verb-pc48-rule-dtr & verb-pc5-rule-dtr & verb-pc54-rule-dtr & verb-pc55-rule-dtr & verb-pc7-rule-dtr & verb-pc9-rule-dtr &
  [ INFLECTED #infl,
    DTR verb-pc44-or-verb-pc49-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc49_lrt1-lex-rule := verb-pc49-lex-rule-super.

verb-pc50-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc1-rule-dtr & verb-pc10-rule-dtr & verb-pc12-rule-dtr & verb-pc14-rule-dtr & verb-pc16-rule-dtr & verb-pc19-rule-dtr & verb-pc20-rule-dtr & verb-pc23-rule-dtr & verb-pc24-rule-dtr & verb-pc27-rule-dtr & verb-pc29-rule-dtr & verb-pc32-rule-dtr & verb-pc33-rule-dtr & verb-pc4-rule-dtr & verb-pc43-rule-dtr & verb-pc48-rule-dtr & verb-pc5-rule-dtr & verb-pc54-rule-dtr & verb-pc55-rule-dtr & verb-pc7-rule-dtr & verb-pc8-rule-dtr & verb-pc9-rule-dtr &
  [ INFLECTED #infl,
    DTR verb-pc15-or-verb-pc50-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc50_lrt1-lex-rule := verb-pc50-lex-rule-super.

verb-pc51-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR verb-pc51-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc51_lrt1-lex-rule := verb-pc51-lex-rule-super.

verb-pc54-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc55-rule-dtr &
  [ INFLECTED #infl,
    DTR verb-pc54-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc54_lrt1-lex-rule := verb-pc54-lex-rule-super.

verb-pc55-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR verb-pc55-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc55_lrt1-lex-rule := verb-pc55-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE fut ].

verb-pc57-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc1-rule-dtr & verb-pc10-rule-dtr & verb-pc16-rule-dtr & verb-pc23-rule-dtr & verb-pc24-rule-dtr & verb-pc29-rule-dtr & verb-pc32-rule-dtr & verb-pc43-rule-dtr & verb-pc48-rule-dtr & verb-pc5-rule-dtr & verb-pc54-rule-dtr & verb-pc55-rule-dtr & verb-pc7-rule-dtr &
  [ INFLECTED #infl,
    DTR verb195-verb-lex &
        [ INFLECTED #infl ] ].

verb-pc57_lrt1-lex-rule := verb-pc57-lex-rule-super.

verb-pc58-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR verb46-verb-lex &
        [ INFLECTED #infl ] ].

verb-pc58_lrt1-lex-rule := verb-pc58-lex-rule-super.

verb-pc59-lex-rule-super := add-only-no-ccont-rule & const-lex-rule &
  [ INFLECTED [ VERB-PC59-OR-VERB-PC60-FLAG +,
                VERB-PC59-FLAG +,
                VERB-PC61-OR-VERB-PC62-FLAG #verb-pc61-or-verb-pc62,
                NOUN-PC5-FLAG #noun-pc5,
                VERB-PC60-FLAG #verb-pc60,
                VERB-PC62-FLAG #verb-pc62,
                VERB-PC61-FLAG #verb-pc61 ],
    DTR verb-pc59-rule-dtr &
        [ INFLECTED [ VERB-PC61-OR-VERB-PC62-FLAG #verb-pc61-or-verb-pc62,
                      NOUN-PC5-FLAG #noun-pc5,
                      VERB-PC60-FLAG #verb-pc60,
                      VERB-PC62-FLAG #verb-pc62,
                      VERB-PC61-FLAG #verb-pc61 ] ] ].

verb-pc59_lrt1-lex-rule := verb-pc59-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER non-1st,
                                                                NUM number ] ].

verb-pc60-lex-rule-super := add-only-no-ccont-rule & const-lex-rule &
  [ INFLECTED [ VERB-PC59-OR-VERB-PC60-FLAG +,
                VERB-PC60-FLAG +,
                VERB-PC61-OR-VERB-PC62-FLAG #verb-pc61-or-verb-pc62,
                NOUN-PC5-FLAG #noun-pc5,
                VERB-PC62-FLAG #verb-pc62,
                VERB-PC59-FLAG #verb-pc59,
                VERB-PC61-FLAG #verb-pc61 ],
    DTR verb-pc60-rule-dtr &
        [ INFLECTED [ VERB-PC61-OR-VERB-PC62-FLAG #verb-pc61-or-verb-pc62,
                      NOUN-PC5-FLAG #noun-pc5,
                      VERB-PC62-FLAG #verb-pc62,
                      VERB-PC59-FLAG #verb-pc59,
                      VERB-PC61-FLAG #verb-pc61 ] ] ].

verb-pc60_lrt1-lex-rule := verb-pc60-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 3rd,
                                                                NUM sg ] ].

verb-pc61-lex-rule-super := add-only-no-ccont-rule & const-lex-rule &
  [ INFLECTED [ VERB-PC61-OR-VERB-PC62-FLAG +,
                VERB-PC61-FLAG +,
                NOUN-PC5-FLAG #noun-pc5,
                VERB-PC60-FLAG #verb-pc60,
                VERB-PC62-FLAG #verb-pc62,
                VERB-PC59-FLAG #verb-pc59,
                VERB-PC59-OR-VERB-PC60-FLAG #verb-pc59-or-verb-pc60 ],
    DTR verb-pc61-rule-dtr &
        [ INFLECTED [ NOUN-PC5-FLAG #noun-pc5,
                      VERB-PC60-FLAG #verb-pc60,
                      VERB-PC62-FLAG #verb-pc62,
                      VERB-PC59-FLAG #verb-pc59,
                      VERB-PC59-OR-VERB-PC60-FLAG #verb-pc59-or-verb-pc60 ] ] ].

verb-pc61_lrt1-lex-rule := verb-pc61-lex-rule-super.

verb-pc62-lex-rule-super := add-only-no-ccont-rule & const-lex-rule &
  [ INFLECTED [ VERB-PC61-OR-VERB-PC62-FLAG +,
                VERB-PC62-FLAG +,
                NOUN-PC5-FLAG #noun-pc5,
                VERB-PC60-FLAG #verb-pc60,
                VERB-PC59-FLAG #verb-pc59,
                VERB-PC59-OR-VERB-PC60-FLAG #verb-pc59-or-verb-pc60,
                VERB-PC61-FLAG #verb-pc61 ],
    DTR verb-pc62-rule-dtr &
        [ INFLECTED [ NOUN-PC5-FLAG #noun-pc5,
                      VERB-PC60-FLAG #verb-pc60,
                      VERB-PC59-FLAG #verb-pc59,
                      VERB-PC59-OR-VERB-PC60-FLAG #verb-pc59-or-verb-pc60,
                      VERB-PC61-FLAG #verb-pc61 ] ] ].

verb-pc62_lrt1-lex-rule := verb-pc62-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 1st,
                                                                NUM pl ] ].

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

comp-head-phrase := basic-head-1st-comp-phrase & head-final.

subj-head-phrase := decl-head-subj-phrase & head-final &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

poss-unary-phrase-pron-1 := poss-unary-phrase &
  [ ARGS < [ SYNSEM.LOCAL.CAT.HEAD.POSSESSOR possessor-pron-1 ] >,
    SYNSEM.LOCAL.CAT [ HEAD.SPEC-INIT +,
                       VAL.SPEC.FIRST.LOCAL.CAT.POSSESSUM nonpossessive ] ].

poss-unary-phrase := basic-unary-phrase &
  [ SYNSEM [ NON-LOCAL #nonloc,
             LOCAL [ CONT.HOOK #hook,
                     CAT [ HEAD det &
                                [ POSSESSOR possessor ],
                           VAL [ SPR < >,
                                 COMPS < >,
                                 SUBJ < >,
                                 SPEC < [ LOCAL [ CAT [ VAL.COMPS < >,
                                                        HEAD noun &
                                                             [ PRON - ] ],
                                                  CONT.HOOK #hook &
                                                            [ INDEX #possessum &
                                                                    [ COG-ST uniq-id ],
                                                              LTOP #lbl ] ] ] > ] ] ] ],
    C-CONT [ RELS.LIST < arg12-ev-relation &
                         [ PRED "poss_rel",
                           LBL #lbl,
                           ARG1 #possessum,
                           ARG2 #possessor ],
                         quant-relation &
                         [ PRED "exist_q_rel",
                           ARG0 #possessum,
                           RSTR #harg ] >,
             HCONS.LIST < qeq &
                          [ HARG #harg,
                            LARG #lbl ] >,
             ICONS.LIST < > ],
    ARGS < [ SYNSEM [ LOCAL [ CAT [ VAL [ SPR < >,
                                          COMPS < >,
                                          SUBJ < >,
                                          SPEC < > ],
                                    HEAD +np ],
                              CONT.HOOK.INDEX #possessor ],
                      NON-LOCAL #nonloc ] ] > ].

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

poss-unary-phrase-pron-2 := poss-unary-phrase &
  [ ARGS < [ SYNSEM.LOCAL.CAT.HEAD.POSSESSOR possessor-pron-2 ] >,
    SYNSEM.LOCAL.CAT [ HEAD.SPEC-INIT +,
                       VAL.SPEC.FIRST.LOCAL.CAT.POSSESSUM possessum-pron-2 ] ].

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS.LIST < [ PRED "exist_q_rel" ] > ].

basic-filler-phrase :+ [ SYNSEM.NON-LOCAL.SLASH.LIST < >,
    ARGS < [ SYNSEM [ LOCAL #slash,
                      NON-LOCAL.SLASH.LIST < > ] ],
           [ SYNSEM.NON-LOCAL.SLASH.LIST < #slash > ] > ].

extracted-subj-phrase := basic-extracted-subj-phrase &
  [ SYNSEM.LOCAL.CAT.HEAD verb ].

;;; Wh-question-related phrasal types

;;;;;;;;;;;;;;;;;;
;;; Coordination
;;;;;;;;;;;;;;;;;;

;;; Coordination Strategy 1

vp1-top-coord-rule := basic-vp-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

vp1-bottom-coord-rule := unary-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL [ COORD-STRAT "1",
                   COORD-REL.PRED "_and_coord_rel" ] ].

;;; Coordination Strategy 2

vp2-top-coord-rule := basic-vp-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

vp2-mid-coord-rule := basic-vp-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

vp2-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

;;; Coordination Strategy 3

vp3-top-coord-rule := basic-vp-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

vp3-mid-coord-rule := basic-vp-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

vp3-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

;;; Coordination Strategy 4

vp4-top-coord-rule := basic-vp-top-coord-rule & omni-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

vp4-mid-coord-rule := basic-vp-mid-coord-rule & omni-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

vp4-bottom-coord-rule := omni-conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

vp4-left-coord-rule := omni-conj-first-left-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

;;; Coordination Strategy 5

vp5-top-coord-rule := basic-vp-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "5" ].

vp5-mid-coord-rule := basic-vp-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "5" ].

vp5-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "5" ].

;;; Coordination Strategy 6

np6-top-coord-rule := basic-np-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "6" ].

np6-mid-coord-rule := basic-np-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "6" ].

np6-bottom-coord-rule := conj-first-bottom-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "6" ].

;;; Coordination Strategy 7

np7-top-coord-rule := basic-np-top-coord-rule & omni-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "7" ].

np7-mid-coord-rule := basic-np-mid-coord-rule & omni-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "7" ].

np7-bottom-coord-rule := omni-conj-last-bottom-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "7" ].

np7-left-coord-rule := omni-conj-last-left-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "7" ].

;;; Coordination Strategy 8

np8-top-coord-rule := basic-np-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "8" ].

np8-mid-coord-rule := basic-np-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "8" ].

np8-bottom-coord-rule := conj-first-bottom-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "8" ].

;;; Coordination Strategy 9

np9-top-coord-rule := basic-np-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "9" ].

np9-bottom-coord-rule := unary-bottom-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL [ COORD-STRAT "9",
                   COORD-REL.PRED "_and_coord_rel" ] ].

clause :+ [ SYNSEM.NON-LOCAL.QUE.LIST < > ].
